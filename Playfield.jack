/** Implements a playfield */
class Playfield {

  field int gridWidth;
  field int gridHeight;
  field Array grid;

  field Square square;

  /** Constructs a new Playfield. */
  constructor Playfield new() {
    var int i;
    let gridWidth = 10;
    let gridHeight = 18;
    let grid = Array.new(gridHeight);
    let i = 0;
    while (i < gridHeight) {
      let grid[i] = Array.new(gridWidth);
      let i = i + 1;
    }
    return this;
  }

  /** Disposes this playfield. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Clears the playfield. */
  method void clear() {
    var int i;
    var int j;
    var Array row;
    var Square s;
    let i = 0;
    while (i < gridHeight) {
      let row = grid[i];
      let j = 0;
      while (j < gridWidth) {
        if (~(row[j] = null)) {
          let s = row[j];
          do s.erase();
          let row[j] = null;
        }
        let j = j + 1;
      }
      let i = i + 1;
    }
    if (~(square = null)) {
      do square.erase();
    }
    return;
  }

  /** Gets the playfield width. */
  method int getWidth() {
    return gridWidth;
  }

  /** Gets the playfield height. */
  method int getHeight() {
    return gridHeight;
  }

  /** Gets a square from the playfield. */
  method Square getSquare(int x, int y) {
    var Array row;
    let row = grid[y];
    return row[x];
  }

  /** Sets a square on the playfield. */
  method void setSquare(int x, int y) {
    var Array row;
    let row = grid[y];
    let row[x] = square;
    return;
  }

  /** Puts a new square from the playfield. */
  method void newSquare() {
    var int x;
    var int y;
    var Array row;
    let x = 4;
    let y = 0;
    let row = grid[0];
    let row[4] = Square.new(x,y);
    let square = row[4];
    return;
  }

  method void moveDown() {
    do square.moveDown();
    return;
  }

  method void moveLeft() {
    do square.moveLeft();
    return;
  }

  method void moveRight() {
    do square.moveRight();
    return;
  }

  method Square getCurrentSquare() {
    return square;
  }

  /** Check if the bottom row is full. */
  method boolean checkScore() {
    var Array row;
    var boolean full;
    var Square s;
    var int i;
    var int j;
    let full = true;
    let i = 0;
    let row = grid[gridHeight - 1];
    while (full & (i < gridWidth)) {
      if (row[i] = null) {
         let full = false;
      }
      let i = i + 1;
    }

    if (full) {
      let i = gridHeight - 1;
      while (i > 0) {
        let row = grid[i];
        let j = 0;
        while (j < gridWidth) {
          if (~(row[j] = null)) {
            let s = row[j];
            do s.erase();
            do s.dispose();
            let s = null;
            let row[j] = null;
          }
          let j = j + 1;
        }
        let i = i - 1;
      }
    }
    return full;
  }
}