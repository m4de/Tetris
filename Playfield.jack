/** Implements a playfield */
class Playfield {

  field int gridWidth;
  field int gridHeight;
  field Array grid;

  field Tetromino tetromino;

  /** Constructs a new Playfield. */
  constructor Playfield new() {
    var int i;
    let gridWidth = 10;
    let gridHeight = 18;
    let grid = Array.new(gridHeight);
    let i = 0;
    while (i < gridHeight) {
      let grid[i] = Array.new(gridWidth);
      let i = i + 1;
    }
    return this;
  }

  /** Disposes this playfield. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Clears the playfield. */
  method void clear() {
    var int i;
    var int j;
    var Array row;
    var Square s;
    let i = 0;
    while (i < gridHeight) {
      let row = grid[i];
      let j = 0;
      while (j < gridWidth) {
        if (~(row[j] = null)) {
          let s = row[j];
          do s.erase();
          let row[j] = null;
        }
        let j = j + 1;
      }
      let i = i + 1;
    }
    if (~(tetromino = null)) {
      do tetromino.erase();
    }
    return;
  }

  /** Gets the playfield width. */
  method int getWidth() {
    return gridWidth;
  }

  /** Gets the playfield height. */
  method int getHeight() {
    return gridHeight;
  }

  /** Gets the grid. */
  method Array getGrid() {
    return grid;
  }

  /** Gets a square from the playfield. */
  method Square getSquare(int x, int y) {
    var Array row;
    let row = grid[y];
    return row[x];
  }

  /** Sets a tetromino on the playfield. */
  method void setTetromino(Tetromino t) {
    var int i;
    var int xpos;
    var int ypos;
    var Array row;
    var Array squares;
    var Square square;
    let i = 0;
    let squares = t.getSquares();
    while (i < 4) {
      let square = squares[i];
      let ypos = square.getYpos();
      let row = grid[ypos];
      let row[square.getXpos()] = square;
      let i = i + 1;
    }
    return;
  }

  /** Puts a new tetromino on the playfield. */
  method void newTetromino() {
    let tetromino = Tetromino.new(4, 0);
    return;
  }

  method void moveDown() {
    do tetromino.moveDown();
    return;
  }

  method void moveLeft() {
    do tetromino.moveLeft();
    return;
  }

  method void moveRight() {
    do tetromino.moveRight();
    return;
  }

  method Tetromino getCurrentTetromino() {
    return tetromino;
  }

  /** Clears the bottom row after scoring. */
  method void clearRow(int rowIndex) {
    var int j;
    var Array row;
    var Square s;
    let j = 0;
    let row = grid[rowIndex];
    while (j < gridWidth) {
      let s = row[j];
      do s.erase();
      do s.dispose();
      let s = null;
      let row[j] = null;
      let j = j + 1;
    }
    return;
  }

  /** Shifts a row down */
  method void shiftRow(int rowIndex) {
    var int j;
    var Array row;
    var Array nextRow;
    var Square s;
    let row = grid[rowIndex];
    let nextRow = grid[rowIndex + 1];
    let j = 0;
    while (j < gridWidth) {
      if (~(row[j] = null)) {
        let s = row[j];
        do s.moveDown();
        let row[j] = null;
        let nextRow[j] = s;
      }
      let j = j + 1;
    }
    return;
  }
}