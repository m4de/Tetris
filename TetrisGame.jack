/** Implements a Tetris game. */
class TetrisGame {

  field int screenWidth;
  field int screenHeight;

  field int squareSize;
  field Square square;
  field int direction;

  /** Constructs a new Tetris game. */
  constructor TetrisGame new() {
    let screenWidth = 512;
    let screenHeight = 256;

    let squareSize = 14;
    let square = Square.new((screenWidth / 2) - squareSize, 0, squareSize); // 18*14+4=256
    let direction = 0;
    return this;
  }

  /** Disposes this game. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Runs the game: handles the userâ€™s inputs and moves the tetrominoes accordingly */
  method void run() {
    var char key; // the key currently pressed by the user
    var boolean exit;
    let exit = false;

    // draw the user interface
    do drawUI();

    while (~exit) {
      // waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
        do moveSquare();
      }
      if (key = 78) { do startNewGame(); }  // n key
      if (key = 81) { let exit = true; }    // q key
      if (key = 130) { let direction = 3; } // left arrow
      if (key = 132) { let direction = 4; } // right arrow

      // waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do moveSquare();
      }
    } // while
    return;
  }

  /** Draws the user interface. */
  method void drawUI() {
    // print menu
    do Output.moveCursor(8,8);
    do Output.printString("Tetris");
    do Output.moveCursor(11,5);
    do Output.printString("(n) New Game");
    do Output.moveCursor(13,5);
    do Output.printString("(q) Quit");
    // draw playing field
    do Screen.drawRectangle(181,0,185,255);
    do Screen.drawRectangle(327,0,331,255);
    // draw first tetromino
    do square.draw();
    return;
  }

  /** Starts a new game. */
  method void startNewGame() {
    let direction = 2;
    return;
  }

  method void moveSquare() {
    var boolean isdown;
    if (direction = 2) {
      let isdown = square.moveDown();
      if (isdown) {

          let square = Square.new((screenWidth / 2) - squareSize, 0, squareSize);
      }
    }
    if (direction = 3) {
      do square.moveLeft();
      let direction = 2;
    }
    if (direction = 4) {
      do square.moveRight();
      let direction = 2;
    }
    do Sys.wait(100); // delays the next movement
    return;
  }
}
