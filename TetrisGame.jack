/** Implements a Tetris game. */
class TetrisGame {

  field int none;
  field int down;
  field int left;
  field int right;

  field boolean exit;
  field boolean paused;
  field boolean gameOver;

  field Playfield playfield;
  field Tetromino tetromino;
  field int nextType;

  field int score;

  field int direction;

  /** Constructs a new Tetris game. */
  constructor TetrisGame new() {
    let none = 0;
    let down = 2;
    let left = 3;
    let right = 4;
    let exit = false;
    let paused = false;
    let gameOver = true;
    let playfield = Playfield.new();
    let score = 0;
    do Random.setSeed(1638);
    let nextType = Random.randRange(6);
    return this;
  }

  /** Disposes this game. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Runs the game: handles the userâ€™s inputs and moves the tetrominoes accordingly */
  method void run() {
    var char key; // the key currently pressed by the user

    // draw the user interface
    do drawUI();

    while (~exit) {
      // waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
      }
      if (key = 78) { do newGame(); }  // n key
      if (key = 81) { do quit(); }    // q key

      // waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }
    } // while
    return;
  }

  /** Draws the user interface. */
  method void drawUI() {
    // print menu
    do Output.moveCursor(6,8);
    do Output.printString("Tetris");
    do Output.moveCursor(9,6);
    do Output.printString("(N)ew Game");
    do Output.moveCursor(11,6);
    do Output.printString("(P)ause");
    do Output.moveCursor(13,6);
    do Output.printString("<=> Move");
    do Output.moveCursor(15,6);
    do Output.printString("(Q)uit");
    // draw playing field
    do Screen.drawRectangle(181,0,185,255);
    do Screen.drawRectangle(327,0,331,255);
    // print right menu
    do Output.moveCursor(4,50);
    do Output.printString("Score:");
    do Output.moveCursor(15,50);
    do Output.printString("Next:");
    return;
  }

  /** Starts a new game. */
  method void newGame() {
    var char key; // the key currently pressed by the user

    let gameOver = false;
    do playfield.clear();
    if (~(tetromino = null)) {
      do tetromino.erase();
    }

    let score = 0;
    do drawScore();

    do Output.moveCursor(10,46);
    do Output.printString("             ");

    let tetromino = Tetromino.new(nextType);
    let nextType = Random.randRange(6);
    do drawNextTetromino();
    let direction = down;

    do pause(false);

    while (~exit) {
      // waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
        do moveTetromino();
      }
      if (key = 78) { do newGame(); }       // n key
      if (key = 80) { do pause(~paused); }  // p key
      if (key = 81) { do quit(); }          // q key
      if (key = 130) { let direction = left; } // left arrow
      if (key = 132) { let direction = right; } // right arrow

      // waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do moveTetromino();
      }
    }
    return;
  }

  /** (Un)pauses the game. */
  method void pause(boolean pause) {
    if (~gameOver) {
      if (pause) {
        let direction = none;
        let paused = true;
        do Output.moveCursor(10,48);
        do Output.printString("* PAUSED *");
      } else {
        let direction = down;
        let paused = false;
        do Output.moveCursor(10,48);
        do Output.printString("          ");
      }
    }
    return;
  }

  /** Quits the game. */
  method void quit() {
    if (~paused) {
      do pause(true);
    }
    do Screen.clearScreen();
    let exit = true;
    return;
  }

  /** Moves the tetromino across the playfield. */
  method void moveTetromino() {
    if (direction = down) {
      if (playfield.isSpace(tetromino, down)) {
        do tetromino.moveDown();
      } else {
        do playfield.setTetromino(tetromino);
        do checkScore();
        do checkGameOver();
      }
    }
    if (direction = left) {
      if (playfield.isSpace(tetromino, left)) {
        do tetromino.moveLeft();
      }
      let direction = down;
    }
    if (direction = right) {
      if (playfield.isSpace(tetromino, right)) {
        do tetromino.moveRight();
      }
      let direction = down;
    }
    do Sys.wait(100); // delays the next movement
    return;
  }

  /** Checks if the bottom row is full. */
  method void checkScore() {
    var int i;
    var int j;
    var int k;
    var int lines;
    var boolean full;
    var Array grid;
    var Array row;
    let lines = 0;
    let grid = playfield.getGrid();
    let i = 0;
    while (i < playfield.getHeight()) {
      let row = grid[i];
      let full = true;
      let j = 0;
      while (j < playfield.getWidth()) {
        if (row[j] = null) {
           let full = false;
        }
        let j = j + 1;
      }
      if (full) {
        do playfield.clearRow(i);
        let k = i;
        while (k > 0) {
          do playfield.shiftRow(k);
          let k = k - 1;
        }
        let lines = lines + 1;
      }
      let i = i + 1;
    }
    let score = score + lines;
    do drawScore();
    return;
  }

  /** Checks if the game is over. */
  method void checkGameOver() {
    if (playfield.isFull()) {
      let direction = none;
      do Output.moveCursor(10,46);
      do Output.printString("* GAME OVER *");
    } else {
      let tetromino = Tetromino.new(nextType);
      let nextType = Random.randRange(6);
      do drawNextTetromino();
    }
    return;
  }

  /** Draws the score on the screen. */
  method void drawScore() {
    do Output.moveCursor(6,52);
    do Output.printInt(score);
    return;
  }

  /** Draws the next tetromino on the screen. */
  method void drawNextTetromino() {
    // erase the previous one
    do Screen.setColor(false);
    do Screen.drawRectangle(410-14, 190, 410 + 42, 190 + 42);

    do Screen.setColor(true);
    if (nextType = 0) {
      do Screen.drawRectangle(410, 190, 410 + 28, 190 + 28);
    }
    if (nextType = 1) {
      do Screen.drawRectangle(410 - 14, 190, 410 + 28, 190 + 14);
    }
    if (nextType = 2) {
      do Screen.drawRectangle(410 - 14, 190, 410 + 28, 190 + 14);
      do Screen.drawRectangle(410, 190 + 14, 410 + 14, 190 + 28);
    }
    if (nextType = 3) {
      do Screen.drawRectangle(410 + 14, 190, 410 + 28, 190 + 42);
      do Screen.drawRectangle(410, 190 + 28, 410 + 14, 190 + 42);
    }
    if (nextType = 4) {
      do Screen.drawRectangle(410, 190, 410 + 14, 190 + 42);
      do Screen.drawRectangle(410 + 14, 190 + 28, 410 + 28, 190 + 42);
    }
    if (nextType = 5) {
      do Screen.drawRectangle(410, 190, 410 + 28, 190 + 14);
      do Screen.drawRectangle(410 - 14, 190 + 14, 410 + 14, 190 + 28);
    }
    if (nextType = 6) {
      do Screen.drawRectangle(410 - 14, 190, 410 + 14, 190 + 14);
      do Screen.drawRectangle(410, 190 + 14, 410 + 28, 190 + 28);
    }
    return;
  }
}
