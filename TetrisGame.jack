/** Implements a Tetris game. */
class TetrisGame {

  field boolean exit;
  field boolean paused;

  field Playfield playfield;

  field int score;

  field int direction;

  /** Constructs a new Tetris game. */
  constructor TetrisGame new() {
    let exit = false;
    let paused = false;
    let playfield = Playfield.new();
    let score = 0;
    return this;
  }

  /** Disposes this game. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Runs the game: handles the userâ€™s inputs and moves the tetrominoes accordingly */
  method void run() {
    var char key; // the key currently pressed by the user

    // draw the user interface
    do drawUI();

    while (~exit) {
      // waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
      }
      if (key = 78) { do newGame(); }  // n key
      if (key = 81) { do quit(); }    // q key

      // waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }
    } // while
    return;
  }

  /** Draws the user interface. */
  method void drawUI() {
    // print menu
    do Output.moveCursor(6,8);
    do Output.printString("Tetris");
    do Output.moveCursor(9,6);
    do Output.printString("(N)ew Game");
    do Output.moveCursor(11,6);
    do Output.printString("(P)ause");
    do Output.moveCursor(13,6);
    do Output.printString("<=> Move");
    do Output.moveCursor(15,6);
    do Output.printString("(Q)uit");
    // draw playing field
    do Screen.drawRectangle(181,0,185,255);
    do Screen.drawRectangle(327,0,331,255);
    // print right menu
    do Output.moveCursor(4,50);
    do Output.printString("Score:");
    do drawScore();
    do Output.moveCursor(15,50);
    do Output.printString("Next:");
    do Screen.setColor(true);
    do Screen.drawRectangle(410, 190, 410 + 14, 190 + 14);
    return;
  }

  /** Starts a new game. */
  method void newGame() {
    var char key; // the key currently pressed by the user

    do playfield.clear();

    let score = 0;
    do drawScore();

    do playfield.newTetromino();
    let direction = 2;

    do pause(false);

    while (~exit) {
      // waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
        do moveSquare();
      }
      if (key = 78) { do newGame(); }       // n key
      if (key = 80) { do pause(~paused); }  // p key
      if (key = 81) { do quit(); }          // q key
      if (key = 130) { let direction = 3; } // left arrow
      if (key = 132) { let direction = 4; } // right arrow

      // waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do moveSquare();
      }
    }
    return;
  }

  /** (Un)pauses the game. */
  method void pause(boolean pause) {
    if (pause) {
      let direction = 0;
      let paused = true;
      do Output.moveCursor(10,48);
      do Output.printString("* PAUSED *");
    } else {
      let direction = 2;
      let paused = false;
      do Output.moveCursor(10,48);
      do Output.printString("          ");
    }
    return;
  }

  /** Quits the game. */
  method void quit() {
    if (~paused) {
      do pause(true);
    }
    do Screen.clearScreen();
    let exit = true;
    return;
  }

  method void moveSquare() {
    var int xpos;
    var int ypos;
    var int xdest;
    var int ydest;
    var Square s;
    var Tetromino t;
    var int scored;
    let t = playfield.getCurrentTetromino();
    let xpos = t.getXpos();
    let ypos = t.getYpos();
    if (direction = 2) {
      let ydest = ypos + 1;
      if (ydest < (playfield.getHeight() - 1)) {
        do playfield.moveDown();
        if (ydest = (playfield.getHeight() - 2)) {
          do playfield.setTetromino(t);
          let scored = checkScore();
          let score = score + scored;
          do drawScore();
          do playfield.newTetromino();
        } else {
          if ((playfield.getSquare(xpos, ydest + 2)) | (playfield.getSquare(xpos + 1, ydest + 2))) {
            do playfield.setTetromino(t);
            let scored = checkScore();
            let score = score + scored;
            do drawScore();
            do playfield.newTetromino();
          }
        }
      }
    }
    if (direction = 3) {
      let xdest = xpos - 1;
      if (xdest > (-(1))) {
        if ((playfield.getSquare(xpos - 1, ypos) = null) & (playfield.getSquare(xpos - 1, ypos + 1) = null)) {
          do playfield.moveLeft();
        }
      }
      let direction = 2;
    }
    if (direction = 4) {
      let xdest = xpos + 1;
      if ((xdest + 1) < playfield.getWidth()) {
        if ((playfield.getSquare(xpos + 1, ypos) = null) & (playfield.getSquare(xpos + 1, ypos + 1) = null)) {
          do playfield.moveRight();
        }
      }
      let direction = 2;
    }
    do Sys.wait(100); // delays the next movement
    return;
  }

  /** Check if the bottom row is full. */
  method int checkScore() {
    var int i;
    var int j;
    var int k;
    var int score;
    var boolean full;
    var Array grid;
    var Array row;
    let score = 0;
    let grid = playfield.getGrid();
    let i = 0;
    while (i < playfield.getHeight()) {
      let row = grid[i];
      let full = true;
      let j = 0;
      while (j < playfield.getWidth()) {
        if (row[j] = null) {
           let full = false;
        }
        let j = j + 1;
      }
      if (full) {
        do playfield.clearRow(i);
        let k = 0;
        while (k < i) {
          do playfield.shiftRow(k);
          let k = k + 1;
        }
        let score = score + 1;
      }
      let i = i + 1;
    }
    return score;
  }

  /** Draws the score on the screen. */
  method void drawScore() {
    do Output.moveCursor(6,52);
    do Output.printInt(score);
    return;
  }
}
