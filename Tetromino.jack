class Tetromino {

  field int numberOfSquares;
  field Array squares;

  field int xpos, ypos; // position of the square in the 10*18 grid

  constructor Tetromino new() {
    var int type;
    let numberOfSquares = 4;
    let squares = Array.new(numberOfSquares);

    let type = Random.randRange(6);

    do setType(type);
    do draw();
    return this;
  }

  /** Disposes this tetromino. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void setType(int type) {
    if (type = 0) {
      let xpos = 4;
      let ypos = 0;
      let squares[2] = Square.new(xpos, ypos);
      let squares[0] = Square.new(xpos, ypos + 1);
      let squares[3] = Square.new(xpos + 1, ypos);
      let squares[1] = Square.new(xpos + 1, ypos + 1);
    }
    if (type = 1) {
      let xpos = 3;
      let ypos = 0;
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 2, ypos);
      let squares[3] = Square.new(xpos + 3, ypos);
    }
    if (type = 2) {
      let xpos = 3;
      let ypos = 0;
      let squares[0] = Square.new(xpos + 1, ypos + 1);
      let squares[1] = Square.new(xpos, ypos);
      let squares[2] = Square.new(xpos + 1, ypos);
      let squares[3] = Square.new(xpos + 2, ypos);
    }
    if (type = 3) {
      let xpos = 4;
      let ypos = 0;

      let squares[0] = Square.new(xpos, ypos + 2);
      let squares[1] = Square.new(xpos + 1, ypos + 2);
      let squares[2] = Square.new(xpos + 1, ypos + 1);
      let squares[3] = Square.new(xpos + 1, ypos);
    }
    if (type = 4) {
      let xpos = 4;
      let ypos = 0;
      let squares[0] = Square.new(xpos, ypos + 2);
      let squares[1] = Square.new(xpos + 1, ypos + 2);
      let squares[2] = Square.new(xpos, ypos + 1);
      let squares[3] = Square.new(xpos, ypos);
    }
    if (type = 5) {
      let xpos = 3;
      let ypos = 0;
      let squares[0] = Square.new(xpos, ypos + 1);
      let squares[1] = Square.new(xpos + 1, ypos + 1);
      let squares[2] = Square.new(xpos + 1, ypos);
      let squares[3] = Square.new(xpos + 2, ypos);
    }
    if (type = 6) {
      let xpos = 3;
      let ypos = 0;

      let squares[0] = Square.new(xpos + 1, ypos + 1);
      let squares[1] = Square.new(xpos + 2, ypos + 1);
      let squares[2] = Square.new(xpos, ypos);
      let squares[3] = Square.new(xpos + 1, ypos);
    }
    return;
  }

  /** Draws the tetromino on the screen. */
  method void draw() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.draw();
      let i = i + 1;
    }
    return;
  }

  /** Erases the tetromino from the screen. */
  method void erase() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.erase();
      let i = i + 1;
    }
    return;
  }

  /** Moves the tetromino down by `size` pixels. */
  method void moveDown() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.moveDown();
      let i = i + 1;
    }
    let ypos = ypos + 1;
    return;
  }

  /** Moves the tetromino left by `size` pixels. */
  method void moveLeft() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.moveLeft();
      let i = i + 1;
    }
    let xpos = xpos - 1;
    return;
  }

  /** Moves the tetromino left by `size` pixels. */
  method void moveRight() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.moveRight();
      let i = i + 1;
    }
    let xpos = xpos + 1;
    return;
  }

  method int getXpos() {
    return xpos;
  }

  method int getYpos() {
    return ypos;
  }

  method Array getSquares() {
    return squares;
  }
}
